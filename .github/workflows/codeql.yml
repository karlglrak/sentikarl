name: "CodeQL"

on:
  push:
    branches: 
      - 'master'

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'python' ]
        python-versions:
          - '3.10.2'
        poetry-versions:
          - '1.1.14'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        setup-python-dependencies: false

    - name: Install Python
      id: setup-python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-versions }}

    - name: Cache pip dependencies
      id: pip-cache
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ steps.setup-python.outputs.python-version }}-pip-${{ hashFiles('**/pyproject.toml') }}

    - name: Install python dependencies
      id: install-python-deps
      run: pip install .

    - name: Install Poetry
      id: install-poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ matrix.poetry-versions }}
        virtualenvs-create: true
        virtualenvs-in-project: true

    # Load venv cache if it exists
    - name: Load cached venv
      id: poetry-cache
      uses: actions/cache@v2
      with:
        path: .venv
        key: ${{ steps.setup-python.outputs.python-version }}-${{ matrix.poetry-versions }}-poetry-${{ hashFiles('**/pyproject.toml') }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      id: install-deps
      if: steps.poetry-cache.outputs.cache-hit != 'true'
      run: poetry install
        
    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
